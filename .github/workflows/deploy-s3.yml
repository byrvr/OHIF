name: Deploy OHIF Viewer to S3

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  NODE_VERSION: "20.18.1"
  AWS_REGION: eu-central-1
  S3_BUCKET: ohif-viewer-obz

jobs:
  # Build job - mirrors CircleCI BUILD job
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      version: ${{ steps.version.outputs.version }}
      commit: ${{ steps.version.outputs.commit }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all Git history for versioning

      - name: Set registry to avoid GitHub proxy cache
        run: echo "registry=https://registry.npmjs.org" > ~/.npmrc

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Verify installation
        run: |
          node --version
          bun --version

      - name: Add Stylus manually to avoid yanked versions
        run: bun add stylus@0.54.8 --dev

      - name: Install dependencies (clean + frozen)
        run: |
          bun pm cache clean
          bun install --no-cache --frozen-lockfile
        env:
          TERM: xterm

      - name: Perform versioning before build
        id: version
        run: |
          bun ./version.mjs
          echo "version=$(cat version.txt 2>/dev/null || echo 'unknown')" >> $GITHUB_OUTPUT
          echo "commit=$(cat commit.txt 2>/dev/null || echo 'unknown')" >> $GITHUB_OUTPUT

      - name: Build OHIF Viewer
        run: bun run build:ci
        timeout-minutes: 45
        env:
          NODE_ENV: production
          PUBLIC_URL: /
          APP_CONFIG: config/default.js
          QUICK_BUILD: false
          TERM: xterm

      - name: Verify build output
        run: |
          echo "Build completed. Checking output..."
          ls -la platform/app/dist/
          echo "Build size:"
          du -sh platform/app/dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ohif-viewer-build
          path: |
            platform/app/dist/
            version.txt
            commit.txt
            version.json
          retention-days: 30

  # Deploy job - only runs on master branch pushes
  deploy:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    permissions:
      contents: read
      id-token: write  # Required for OIDC

    environment:
      name: production
      url: http://${{ env.S3_BUCKET }}.s3-website.${{ env.AWS_REGION }}.amazonaws.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ohif-viewer-build

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-OHIF-Deploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Compress files for better performance
        run: |
          echo "Compressing JavaScript, CSS, and map files..."
          find platform/app/dist -name "*.js" -type f -exec gzip -9 -k {} \;
          find platform/app/dist -name "*.css" -type f -exec gzip -9 -k {} \;
          find platform/app/dist -name "*.map" -type f -exec gzip -9 -k {} \;
          find platform/app/dist -name "*.svg" -type f -exec gzip -9 -k {} \;

          echo "Compressed file sizes:"
          find platform/app/dist -name "*.gz" -exec ls -lh {} \;

      - name: Deploy static assets to S3
        run: |
          echo "üöÄ Starting deployment to S3..."

          # Deploy compressed files with appropriate encoding
          aws s3 sync platform/app/dist/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --exclude "*.html" \
            --exclude "*.json" \
            --exclude "*.gz" \
            --cache-control "public, max-age=31536000, immutable"

          # Deploy compressed JS, CSS, SVG files with gzip encoding
          aws s3 sync platform/app/dist/ s3://${{ env.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.js.gz" \
            --include "*.css.gz" \
            --include "*.svg.gz" \
            --include "*.map.gz" \
            --content-encoding gzip \
            --cache-control "public, max-age=31536000, immutable" \
            --metadata-directive REPLACE

          # Deploy HTML and JSON files with no-cache headers
          aws s3 sync platform/app/dist/ s3://${{ env.S3_BUCKET }}/ \
            --exclude "*" \
            --include "*.html" \
            --include "*.json" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --metadata-directive REPLACE

      - name: Set correct content types for compressed files
        run: |
          aws s3 cp s3://${{ env.S3_BUCKET }}/ s3://${{ env.S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.js.gz" \
            --content-type "application/javascript" \
            --content-encoding gzip \
            --metadata-directive REPLACE \
            --copy-props metadata-directive

          aws s3 cp s3://${{ env.S3_BUCKET }}/ s3://${{ env.S3_BUCKET }}/ \
            --recursive \
            --exclude "*" \
            --include "*.css.gz" \
            --content-type "text/css" \
            --content-encoding gzip \
            --metadata-directive REPLACE \
            --copy-props metadata-directive

      - name: Invalidate CloudFront distribution
        if: vars.CLOUDFRONT_DISTRIBUTION_ID != ''
        run: |
          echo "üîÑ Invalidating CloudFront distribution..."
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ vars.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          echo "CloudFront invalidation created: $INVALIDATION_ID"

      - name: Deployment summary
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo ""
          echo "üìä Deployment Details:"
          echo "  ‚Ä¢ Version: ${{ needs.build.outputs.version }}"
          echo "  ‚Ä¢ Commit: ${{ needs.build.outputs.commit }}"
          echo "  ‚Ä¢ S3 Bucket: ${{ env.S3_BUCKET }}"
          echo "  ‚Ä¢ Region: ${{ env.AWS_REGION }}"
          echo ""
          echo "üåê Access URLs:"
          echo "  ‚Ä¢ S3 Website: http://${{ env.S3_BUCKET }}.s3-website.${{ env.AWS_REGION }}.amazonaws.com"
          if [ ! -z "${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "  ‚Ä¢ CloudFront: https://${{ vars.CLOUDFRONT_DISTRIBUTION_ID }}.cloudfront.net"
          fi
          echo ""
          echo "üìã Deployment Info:"
          aws s3 ls s3://${{ env.S3_BUCKET }}/ --recursive --summarize | tail -2

  # Staging deployment for manual testing (optional)
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      id-token: write

    environment:
      name: staging
      url: http://${{ env.S3_BUCKET }}-staging.s3-website.${{ env.AWS_REGION }}.amazonaws.com

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ohif-viewer-build

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_STAGING_ROLE_ARN }}
          role-session-name: GitHubActions-OHIF-Staging-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging S3 bucket
        run: |
          echo "üöÄ Deploying to staging environment..."
          aws s3 sync platform/app/dist/ s3://${{ env.S3_BUCKET }}-staging/ \
            --delete \
            --cache-control "no-cache, no-store"

      - name: Comment PR with staging URL
        uses: actions/github-script@v7
        with:
          script: |
            const stagingUrl = `http://${{ env.S3_BUCKET }}-staging.s3-website.${{ env.AWS_REGION }}.amazonaws.com`;
            const comment = `üöÄ **Staging deployment complete!**
            
            Preview your changes at: ${stagingUrl}
            
            Version: ${{ needs.build.outputs.version }}
            Commit: ${{ needs.build.outputs.commit }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
